#![cfg_attr(not(feature = "std"), no_std)]

use frame_support::{decl_module, decl_storage, dispatch::DispatchResult};
use frame_system::ensure_signed;

pub trait Config: frame_system::Config {}

decl_storage! {
    trait Store for Module<T: Config> as PolkadotBridge {
        LockedTokens get(fn locked_tokens): map hasher(blake2_128_concat) T::AccountId => u128;
    }
}

decl_module! {
    pub struct Module<T: Config> for enum Call where origin: T::Origin {
        #[weight = 10_000]
        fn unlock_tokens(origin, amount: u128) -> DispatchResult {
            let sender = ensure_signed(origin)?;

            ensure!(<LockedTokens<T>>::contains_key(&sender), "No tokens locked");
            let locked = <LockedTokens<T>>::get(&sender);
            ensure!(locked >= amount, "Not enough locked tokens");

            <LockedTokens<T>>::insert(&sender, locked - amount);

            // Logic to unlock tokens on Polkadot side goes here
            // Example: Transfer tokens from bridge to user's account
            Ok(())
        }

        // This function is triggered by the relayer to lock tokens
        fn lock_tokens_for_relay(origin, user: T::AccountId, amount: u128) -> DispatchResult {
            let sender = ensure_signed(origin)?;

            // Assume tokens are locked on Ethereum side, now lock on Polkadot side
            <LockedTokens<T>>::insert(user.clone(), amount);
            Ok(())
        }
    }
}
